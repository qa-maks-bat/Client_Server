QA Course by Vadim Ksendzov 
Group_30_QA

CLIENT_SERVER HOMEWORK

Name: Maksim Batrakou
Telegram: @maks_tbat 	 
Location: Minsk, Belarus
Environment: Windows 10, Notepad++

1. Прочитать про клиент-серверную архитектуру:

    * Клиент - это та программма, с которой работает пользователь (браузер, desktop-риложение) на персональном компьютере, смартфоне или другом девайсе.
    * Сервер - компьютер, на котором хранится само приложение, весь код, вся логика, все дополнительные материалы и справочники.
    * Клиент-серверная архитектура (КСА) может быть одно-, двух- и трёхуровневой, а также многоуровневой:
        + одноуровневая КСА (1-Tier): все прикладные программы рассредоточены по рабочим станциям, которые обращаются к общему серверу баз данных или общему файловому серверу. Никаких прикладных программ сервер при этом не исполняет, только предоставляет данные, двух- и трёхуровневой, а также многоуровневой;
        + двухуровневая КСА (2-Tier): прикладные программы сосредоточены на сервере приложений (Application Server), например, сервер 1С или сервер CRM, а в рабочих станциях находятся программы-клиенты, которые предоставляют для пользователей интерфейс для работы с приложениями на сервере:
            - fat client thin server (толстый клиент, тонкий сервер) - это, когда общие данные хранятся на сервере, а логика их обработки и бизнес данные хранятся на клиентской машине;
            - thin client fat server (тонкий клиент, толстый сервер) - это, когда не только данные, но и логика их обработки и бизнес-данные хранятся на сервере (прообраз облачных вычислений (Cloud Computing);
        + трёхуровневая КСА (3-Tier): сервер баз данных, файловый сервер и другие представляют собой отдельный уровень, результаты работы которого использует сервер приложений. Логика данных и бизнес-логика находятся на сервере приложений. Все обращения клиентов к базе данных происходят через промежуточное программное обеспечение (middleware), которое находится на сервере приложений;
        + многоуровневая КСА (N-Tier): несколько серверов приложений используют результаты работы друг друга, а также данные различных серверов баз данных, файловых серверов и других видов серверов.
        
2. Что такое HTTP и HTTPS:

    * HTTP (Hyper Text Transfer Protocol) - протокол передачи гипертекста, прикладной протокол передачи данных в сети, который используется для получения информации с веб-сайтов. 
    Протокол HTTP основан на использовании технологии "клиент-сервер":
         + клиент, отправляющий запрос, является инициатором соединения;
         + сервер, получающий запрос, выполняет его и отправляет клиенту результат.
    * HTTPS (Hyper Text Transfer Protocol Secure) - безопасный протокол передачи гипертекста, это расширение протокола HTTP, поддерживающее шифрование посредством криптографических протоколов SSL и TLS.
    * HTTP vs HTTPS:
         + HTTP использует порт 80, передаваемые данные не защищены;
         + HTTPS использует порт 443,обеспечивается конфиденциальность передаваемых данных путём их шифрования; 
         + HTTPS не является отдельным протоколом передачи данных, а представляет собой расширение протокола HTTP с надстройкой шифрования. Для реализации передачи данных посредством HTTPS на веб-сервере, обрабатывающем запросы от клиентов, должен быть установлен специальный SSL-сертификат. Наличие SSL-сертификата является одним из факторов ранжирования Google, поэтому переход на протокол HTTPS повышает позиции в поисковой выдаче Google.
    * SSL-сертификат — это цифровая подпись, которая позволяет обеспечить безопасное зашифрованное соединение между веб-сервером (сайтом) и веб-клиентом (браузером) посредством протокола HTTPS. SSL-сертификат особенно необходим ресурсам, которые работают с личными данными пользователей, платежными системами, конфиденциальной информацией. Шифрование таких данных обеспечит их защиту от перехвата третьими лицами, а также станет свидетельством заботы о пользователях.

3. HTTP методы:

    * GET - получение (возвращение) ресурса: получение данных с сервера (некоторые данные могут быть переданы в строке запроса URI, указывающие, например, условия поиска, диапазоны дат, или другую информацию, определяющую запрос): чтение без изменений, может запускать процесс, сообщения ответов сервера на выполнение метода могут кешироваться;
    * HEAD - получение ресурса: как и метод GET, но без тела ответа (извлечение метаданных, проверка наличия ресурса (валидация URL) и чтобы узнать, не изменился ли он с момента последнего обращения), заголовки ответа могут кэшироваться;
    * POST - создание ресурса: передача пользовательских данных заданному ресурсу (передаваемые данные включаются в тело запроса), загрузка файлов на сервер, сообщение ответа сервера на выполнение метода не кешируется;
    * PUT - обновление ресурса: применяется для загрузки содержимого запроса на указанный в запросе URI. Заменяет все текущие представления ресурса данными запроса. Если по заданному URI не существует ресурса, то сервер создаёт его и возвращает статус 201 (Created). Если же ресурс был изменён, то сервер возвращает 200 (Ok) или 204 (No Content). Сообщения ответов сервера не кэшируются;
    * PATCH - обновление ресурса: аналогично PUT, но применяется только к фрагменту ресурса для частичного изменения ресурса;
    * DELETE - удаление ресурса: удаляет указанный ресурс;
    * TRACE - возвращает полученный запрос так, что клиент может увидеть, какую информацию промежуточные серверы добавляют или изменяют в запросе;
    * CONNECT - преобразует соединение запроса в прозрачный TCP/IP-туннель, обычно чтобы содействовать установлению защищённого SSL-соединения через нешифрованный прокси;
    * OPTIONS - используется для получения сведений с сервера о параметрах соединения с ресурсом.
    
4. HTTP статус коды сервера

5. Что такое ядро браузера

6. Какие браузеры какие ядра используют

7. Что такое API

8. Что такое ендпоинты

9. URL (URI, URL, URN)

10. Идемпотентные HTTP методы

11. Безопасные HTTP методы

12. Иденфикация, Аутентификация, Авторизация

13. Что такое IP

14. Что такое октаты в DNS

15. Что такое порт, сколько портов у Linux сервера

16. Уровни OSI

17. Хедеры http запросов
